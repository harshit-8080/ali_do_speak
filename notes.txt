--> Till here 

        1.  We have learned about http connection. which is over tcp
        2.  and as we know in http connection, client make a request and server send the response and connection breaks.


--> what if we need bi directional communication

        1.  wehere anyone can make a request and anyone send a response


--> So web socket allows use fo bi directional communication  ( pipeline setup in web sockets )

        1.  Web socket also use tcp connection
        2.  It's reliable
        3.  node js has socket.io libray for implementation of web socket
        4.  ror has active channel for the same.

        5. socket.io has the best documentation.

        6. We will little bit of frontend also, not react just dom functions.

        7. It gives us a event based architecture.
            1.  What is event based architecture, Whenever you have to do something you emit an event.
            
            2.  And other end we consume an event.
            
            3.  Let's understand what is events in node js
                ---> check github and start event theory and code.

            4.   after that setup the basic express js project 

            5. install socket.io ==> npm i socket.io   

            6. make a public folder and index.html file inside that.

            7. To server some static file like html file we need to use middleware
                app.use("/", express.static(__dirname + "/public"));

            8. start project and go to ==> http://localhost:3000/  

            9. now go to socket.io/get-started/chat  

            10. Now do what ever in documentation
                ////////////////////////////////////////////////////////////////
                        const http = require('http');
                        const server = http.createServer(app);
                        const { Server } = require("socket.io");
                        const io = new Server(server);

                        server.listen(3000);
                //////////////////////////////////////////////////////////////// 

            11. now Go to --> http://localhost:3000/socket.io/socket.io.js       

            12. now in index.html
                ////////////////////////////////////////////////////////////////

                    <script src="/socket.io/socket.io.js"></script>
                    <script src="script.js"></script>

                ////////////////////////////////////////////////////////////////



           13.     now in script.js 

                ////////////////////////////////////////////////////////////////

                        var socket = io();

                ////////////////////////////////////////////////////////////////

           14. now in server.js 

                So Whenever anyone join this socket one connection event is emitted

                ////////////////////////////////////////////////////////////////

                        io.on('connection', (socket) => {
                                console.log('a user connected');
                        });

                ////////////////////////////////////////////////////////////////

             15. Every connection has unique connection id event is emitted

                ////////////////////////////////////////////////////////////////

                         io.on('connection', (socket) => {
                                console.log('a user connected ', socket.id);
                        });
                ////////////////////////////////////////////////////////////////    



              16. Now once our connection is established Now send some data from server to client and client to server 

                        ////////////////////////////////////////////////////////////////
                                1. add code in io.connection and emit some event -->
                                        setInterval((
                                                socket.emit("fromServer")
                                        )=>{},2000)

                                2. 
                                        io.on('connection', (socket) => {
                                                console.log('a user connected ', socket.id);
                                                setInterval(()=>{
                                                        socket.emit("fromServer")
                                                },2000)
                                        });     
                        ////////////////////////////////////////////////////////////////       
                        



                17. Now listen this event in client

                        ////////////////////////////////////////////////////////////////

                                socket.on("fromServer", () => {
                                        const div = document.createElement("div");
                                        div.innerText = "New Event from server";
                                        document.body.appendChild(div);
                                });

                        ////////////////////////////////////////////////////////////////


        18. Send some events from client to server

                ////////////////////////////////////////////////////////////////

                            <button id="btn"> Click Me</button>

                            // sending event from client to server
                            const btn = document.getElementById("btn");

                            btn.onclick = function clickMe() {
                                socket.emit("fromClient");
                             };
                             

                ////////////////////////////////////////////////////////////////      

        19. Server can consume this event
                ////////////////////////////////////////////////////////////////

                  socket.on("fromClient", () => {
                        console.log("messgae received from client");
                  });

                ////////////////////////////////////////////////////////////////    

        20. Now two way communication is being setup anyone can send the data

                1. Client to Server
                2. Server to Client


--------------------------------------------------------------------------------------------------------------------------------


21. After that use good notes and explain How the two client can connect to the server.

22. If one client wants to publish a message they can emit a message to the server.

23. now server can consume and emit a message to both clients.


---------------------------------------------------------------------------------------------------------------------------------       








